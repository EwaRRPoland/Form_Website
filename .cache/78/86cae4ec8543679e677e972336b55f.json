{"id":"form_website.html","dependencies":[{"name":"_css_loader","parent":"C:\\Users\\Ewa\\Desktop\\projekt js\\Form_website\\Form_Website\\form_website.html","resolved":"C:\\Users\\Ewa\\Desktop\\projekt js\\Form_website\\Form_Website\\node_modules\\parcel-bundler\\src\\builtins\\css-loader.js"},{"name":"C:\\Users\\Ewa\\Desktop\\projekt js\\Form_website\\Form_Website\\package.json","includedInParent":true,"mtime":1720880309818}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Form with list</title>\r\n    <style>body {\r\n        /* sets the background as a gradient */\r\n        background: linear-gradient(\r\n          to right,\r\n          rgb(133, 133, 233),\r\n          rgb(240, 242, 243)\r\n        );\r\n        display: flex;\r\n      justify-content: space-between;\r\n      }\r\n      /* style for HTML elements with the .button class */\r\n      .button {\r\n        /* sets the width 150 and height of the button to 50 pixels */\r\n        width: 150px;\r\n        height: 50px;\r\n        /* sets the font size to 25 pixels */\r\n        font-size: 20px;\r\n        /* adds a margin of 2 pixels around the button */\r\n        margin: 2px;\r\n        /* changes the cursor to a pointer -hand with pointing finger- when the user hovers over the button */\r\n        cursor: pointer;\r\n        /* rounds the corners of the buttons */\r\n        border-radius: 10px;\r\n        /* changes the background color of the button to red when hovered */\r\n        transition: background-color 0.3s ease;\r\n      }\r\n      .button:hover {\r\n        background-color: rgb(87, 76, 194);\r\n      }    \r\n.leftContainer {\r\n  width: 50%;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.formContainer {\r\n  flex: 1;\r\n  width: 50%;\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n  background: #fff;\r\n  border: 1px solid;\r\n  padding: 15px;\r\n  border-radius: 15px 15px;\r\n}\r\n      .personForm {\r\n        width: 50%;\r\n      }\r\n     \r\n/*Tutaj dodatkowe style dla listy pracowników */\r\n.personList {\r\n  width: 50%;\r\n  padding: 10px;\r\n  border-left: 1px solid #ccc;\r\n}\r\n\r\n.personList table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\n.personList th, .personList td {\r\n  border: 1px solid #ddd;\r\n  padding: 8px;\r\n}\r\n\r\n.personList tr:nth-child(even) {\r\n  background-color: #f2f2f2;\r\n}\r\n\r\n.personList th {\r\n  padding-top: 12px;\r\n  padding-bottom: 12px;\r\n  text-align: left;\r\n  background-color: rgb(87, 76, 194);\r\n  color: white;\r\n}\r\n      label {\r\n        display: block;\r\n        font-weight: bold;\r\n      }\r\n      input {\r\n        box-shadow: 4px 4px 2px #ccc;\r\n        border: 1px solid;\r\n        padding: 5px;\r\n      }</style>\r\n  </head>\r\n  <div class=\"leftContainer\">\r\n    <h1 style=\"text-align: center\">Form for adding people:</h1>\r\n \r\n  <div class=\"formContainer\">\r\n    \r\n    <div class=\"personForm\">\r\n      <form id=\"personForm\">\r\n        <label for=\"firstName\">Imię:</label>\r\n        <input type=\"text\" id=\"firstName\" name=\"firstName\" required=\"\"><br>\r\n        <label id=\"firstNameError\" style=\"color: red; display: none\">\r\n          Wprowadziłeś niewłaściwe dane. Wprowadź literę.</label>\r\n        <br>\r\n        <label for=\"lastName\">Nazwisko:</label>\r\n        <input type=\"text\" id=\"lastName\" name=\"lastName\" required=\"\"><br>\r\n        <label id=\"lastNameError\" style=\"color: red; display: none\">\r\n          Wprowadziłeś niewłaściwe dane. Wprowadź literę.</label>\r\n        <br>\r\n        <!-- zapytanie o wiek pracownika - do rozbudowania -->\r\n        <label for=\"ageEmployee\">Wiek:</label>\r\n        <input type=\"number\" id=\"ageEmployee\" name=\"ageEmployee\" required=\"\"><br>\r\n        <br>\r\n        <label for=\"position\">Stanowisko:</label>\r\n        <input type=\"text\" id=\"position\" name=\"position\" required=\"\"><br>\r\n        <label id=\"positionError\" style=\"color: red; display: none\">\r\n          Wprowadziłeś niewłaściwe dane. Wprowadź literę.</label>\r\n        <br>\r\n        <label for=\"phone\">Numer telefonu:</label>\r\n        <input type=\"tel\" id=\"phone\" name=\"phone\" required=\"\"><br>\r\n        <label id=\"phoneError\" style=\"color: red; display: none\">\r\n          Wprowadziłeś niewłaściwe dane. Wprowadź cyfrę.</label>\r\n        <br>\r\n        <p>\r\n          <button class=\"button\" onclick=\"submit\">Add an employee</button>\r\n        </p>\r\n      </form>\r\n    </div>\r\n  </div>\r\n </div>\r\n   \r\n    <div class=\"personList\">\r\n      <h2>List of added people:</h2>\r\n      <ul id=\"personList\"></ul>\r\n    </div>\r\n  \r\n    <script>function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n// Definiujemy funkcję Math.sum - operator REST (...) zbiera wszystkie przekazane argumenty w tablicę\nMath.sum = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return args.reduce(function (a, b) {\n    return a + b;\n  }, 0);\n};\n\n// funkcja sprawdzająca czy ciąg składa sie tylko z liter\nfunction areLetters(event) {\n  var pattern = /^[A-Za-z]+$/;\n  var label = document.getElementById(event.target.id + \"Error\");\n  if (!event.key.match(pattern)) {\n    label.style.display = \"block\"; // Pokazanie etykiety\n    event.preventDefault(); // Zapobieganie domyślnej akcji\n  } else {\n    label.style.display = \"none\"; // Ukrycie etykiety\n  }\n}\n\n// funkcja sprawdzająca czy ciąg składa sie tylko z cyfr\nfunction validatePhone(event) {\n  var regex = /^[0-9]*$/;\n  var label = document.getElementById(event.target.id + \"Error\");\n  if (!event.key.match(regex)) {\n    label.style.display = \"block\"; // Pokazanie etykiety\n    event.preventDefault(); // Zapobieganie domyślnej akcji\n  } else {\n    label.style.display = \"none\"; // Ukrycie etykiety\n  }\n}\n\n// Dodajemy zdarzenia keypress do odpowiednich pól\n[\"firstName\", \"lastName\", \"position\"].forEach(function (id) {\n  document.getElementById(id).addEventListener(\"keypress\", areLetters);\n});\ndocument.getElementById(\"phone\").addEventListener(\"keypress\", validatePhone);\nvar form = document.getElementById(\"personForm\"); // Znajdowanie formularza\nvar personList = document.getElementById(\"personList\"); // Znajdowanie listy osób\n\n// Tworzenie pustej tablicy do przechowywania obiektów-pracowników\nvar arrayEmployees = [];\nform.addEventListener(\"submit\", function (event) {\n  event.preventDefault(); // Zapobiegamy domyślnej akcji formularza (np. przeładowania strony)\n  var firstName = document.getElementById(\"firstName\").value; // Pobieranie wartości pola \"Imię\"\n  var lastName = document.getElementById(\"lastName\").value; // Pobieranie wartości pola \"Nazwisko\"\n  var ageEmployee = document.getElementById(\"ageEmployee\").value; // Pobieranie wartości pola \"Wiek\"\n  var position = document.getElementById(\"position\").value; // Pobieranie wartości pola \"Stanowisko\"\n  var phone = document.getElementById(\"phone\").value; // Pobieranie wartości pola \"Numer telefonu\"\n\n  // Tworzenie obiektu pracownika\n  var employee = {\n    imie: firstName,\n    nazwisko: lastName,\n    wiek: parseInt(ageEmployee),\n    // Konwersja wieku na liczbę\n    stanowisko: position,\n    telefon: phone\n  };\n\n  //**// Sprawdzamy, czy wiek nowo dodanego pracownika jest wyższy od obecnego najwyższego wieku\n  var storedAge = sessionStorage.getItem('najwyzszyWiek');\n  if (storedAge) {\n    storedAge = Number(storedAge);\n    if (employee.wiek > storedAge) {\n      // Jeśli tak, to aktualizujemy najwyższy wiek w sessionStorage\n      sessionStorage.setItem('najwyzszyWiek', employee.wiek.toString());\n    }\n  } else {\n    // Jeśli w sessionStorage nie ma zapisanego najwyższego wieku, to zapisujemy wiek nowo dodanego pracownika\n    sessionStorage.setItem('najwyzszyWiek', employee.wiek.toString());\n  }\n  // Dodawanie obiektu pracownika do listy\n  arrayEmployees.push(employee);\n\n  // Sortowanie listy pracowników alfabetycznie po nazwisku\n  arrayEmployees.sort(function (a, b) {\n    return a.nazwisko.localeCompare(b.nazwisko);\n  });\n\n  // Czyszczenie listy osób na stronie\n  personList.innerHTML = \"\";\n\n  // Tworzenie tabeli i jej elementów\n  var table = document.createElement(\"table\");\n  var thead = document.createElement(\"thead\");\n  var tbody = document.createElement(\"tbody\");\n\n  // Dodawanie nagłówków tabeli\n  var headers = [\"Imię\", \"Nazwisko\", \"Wiek\", \"Stanowisko\", \"Telefon\"];\n  var tr = document.createElement(\"tr\");\n  headers.forEach(function (header) {\n    var th = document.createElement(\"th\");\n    th.textContent = header;\n    tr.appendChild(th);\n  });\n  thead.appendChild(tr);\n\n  // Dodawanie posortowanych pracowników do tabeli\n  arrayEmployees.forEach(function (employee) {\n    var tr = document.createElement(\"tr\");\n    Object.values(employee).forEach(function (value) {\n      var td = document.createElement(\"td\");\n      td.textContent = value;\n      tr.appendChild(td);\n    });\n    tbody.appendChild(tr);\n  });\n\n  // Dodawanie elementów tabeli do tabeli\n  table.appendChild(thead);\n  table.appendChild(tbody);\n\n  // Dodawanie tabeli do listy osób\n  personList.appendChild(table);\n\n  // Wyliczamy sumę wieku pracowników - operator SPREAD (...)rozbija tablicę wieków na pojedyńcze liczby\n  var sumAge = Math.sum.apply(Math, _toConsumableArray(arrayEmployees.map(function (employee) {\n    return employee.wiek;\n  })));\n  // Wyświetli sumę wieku wszystkich pracowników pod listą pracowników\n  var sumAgeElement = document.createElement(\"p\"); // Tworzenie paragrafu\n  sumAgeElement.textContent = \"Zsumowany wiek pracownik\\xF3w: \".concat(sumAge); // Ustawienie tekstu paragrafu na sumę wieku pracowników\n  personList.appendChild(sumAgeElement); // Dodawanie paragrafu do listy osób\n\n  // Wyliczamy najwyższy wiek pracowników - operator SPREAD (...)rozbija tablicę wieków na pojedyńcze liczby\n  var highestAge = Math.max.apply(Math, _toConsumableArray(arrayEmployees.map(function (employee) {\n    return employee.wiek;\n  })));\n\n  //**// Wyświetli najwyższy wiek z wszystkich pracowników pod listą pracowników\n  var highestAgeElement = document.createElement(\"p\"); // Tworzenie paragrafu\n\n  // *Sprawdzamy, czy w sessionStorage jest zapisany najwyższy wiek\n  if (sessionStorage.getItem('najwyzszyWiek')) {\n    // Jeśli tak, to ustawiamy najwyższy wiek na wartość zapisaną w sessionStorage\n    highestAge = Number(sessionStorage.getItem('najwyzszyWiek'));\n  }\n  highestAgeElement.textContent = \"Najwy\\u017Cszy wiek w\\u015Br\\xF3d pracownik\\xF3w: \".concat(highestAge); // Ustawienie tekstu paragrafu na najwyższy wiek z pracowników\n  personList.appendChild(highestAgeElement); // Dodawanie paragrafu do listy osób\n\n  // Dodajemy kod do wyświetlenia wartości najwyzszyWiek z sessionStorage w konsoli\n  console.log('Wartość najwyzszyWiek zapisana w sessionStorage to: ', sessionStorage.getItem('najwyzszyWiek'));\n\n  // Obliczamy średni wiek pracowników\n  var averageAge = sumAge / arrayEmployees.length;\n  // Wyświetli średni wiek wszystkich pracowników pod listą pracowników\n  var averageAgeElement = document.createElement(\"p\"); // Tworzenie paragrafu\n  averageAgeElement.textContent = \"\\u015Aredni wiek pracownik\\xF3w: \".concat(averageAge); // Ustawienie tekstu paragrafu na średni wiek pracowników\n  personList.appendChild(averageAgeElement); // Dodawanie paragrafu do listy osób\n\n  form.reset(); // Czyszczenie formularza\n});</script>\r\n  \r\n</html>"},"sourceMaps":null,"error":null,"hash":"ffa8996c946a989998acadf6ecb9543f","cacheData":{"env":{}}}